//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/BossKillingInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BossKillingInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BossKillingInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BossKillingInput"",
    ""maps"": [
        {
            ""name"": ""BossKilling"",
            ""id"": ""c056eb04-4ea6-4411-8b92-6e737fcef799"",
            ""actions"": [
                {
                    ""name"": ""Kill"",
                    ""type"": ""Button"",
                    ""id"": ""0fe01527-6ef5-44e0-8389-fec540b9870a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1320ffdb-22cb-45b0-bbd0-e8e2f933b0a5"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Kill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BossKilling
        m_BossKilling = asset.FindActionMap("BossKilling", throwIfNotFound: true);
        m_BossKilling_Kill = m_BossKilling.FindAction("Kill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BossKilling
    private readonly InputActionMap m_BossKilling;
    private List<IBossKillingActions> m_BossKillingActionsCallbackInterfaces = new List<IBossKillingActions>();
    private readonly InputAction m_BossKilling_Kill;
    public struct BossKillingActions
    {
        private @BossKillingInput m_Wrapper;
        public BossKillingActions(@BossKillingInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Kill => m_Wrapper.m_BossKilling_Kill;
        public InputActionMap Get() { return m_Wrapper.m_BossKilling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BossKillingActions set) { return set.Get(); }
        public void AddCallbacks(IBossKillingActions instance)
        {
            if (instance == null || m_Wrapper.m_BossKillingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BossKillingActionsCallbackInterfaces.Add(instance);
            @Kill.started += instance.OnKill;
            @Kill.performed += instance.OnKill;
            @Kill.canceled += instance.OnKill;
        }

        private void UnregisterCallbacks(IBossKillingActions instance)
        {
            @Kill.started -= instance.OnKill;
            @Kill.performed -= instance.OnKill;
            @Kill.canceled -= instance.OnKill;
        }

        public void RemoveCallbacks(IBossKillingActions instance)
        {
            if (m_Wrapper.m_BossKillingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBossKillingActions instance)
        {
            foreach (var item in m_Wrapper.m_BossKillingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BossKillingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BossKillingActions @BossKilling => new BossKillingActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IBossKillingActions
    {
        void OnKill(InputAction.CallbackContext context);
    }
}
