//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/DebugFunctionalityInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugFunctionalityInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugFunctionalityInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugFunctionalityInput"",
    ""maps"": [
        {
            ""name"": ""PlayerDebugFuntionalityActionMap"",
            ""id"": ""7dd78340-5138-44fe-be4f-00cd7d2a1c81"",
            ""actions"": [
                {
                    ""name"": ""OpenDebugMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b72a6c98-a230-4dd1-b3db-4fe50a9fd930"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""544f9767-f6f1-4744-b327-3878f81007a0"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenDebugMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerDebugFuntionalityActionMap
        m_PlayerDebugFuntionalityActionMap = asset.FindActionMap("PlayerDebugFuntionalityActionMap", throwIfNotFound: true);
        m_PlayerDebugFuntionalityActionMap_OpenDebugMenu = m_PlayerDebugFuntionalityActionMap.FindAction("OpenDebugMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerDebugFuntionalityActionMap
    private readonly InputActionMap m_PlayerDebugFuntionalityActionMap;
    private List<IPlayerDebugFuntionalityActionMapActions> m_PlayerDebugFuntionalityActionMapActionsCallbackInterfaces = new List<IPlayerDebugFuntionalityActionMapActions>();
    private readonly InputAction m_PlayerDebugFuntionalityActionMap_OpenDebugMenu;
    public struct PlayerDebugFuntionalityActionMapActions
    {
        private @DebugFunctionalityInput m_Wrapper;
        public PlayerDebugFuntionalityActionMapActions(@DebugFunctionalityInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenDebugMenu => m_Wrapper.m_PlayerDebugFuntionalityActionMap_OpenDebugMenu;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDebugFuntionalityActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDebugFuntionalityActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerDebugFuntionalityActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerDebugFuntionalityActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerDebugFuntionalityActionMapActionsCallbackInterfaces.Add(instance);
            @OpenDebugMenu.started += instance.OnOpenDebugMenu;
            @OpenDebugMenu.performed += instance.OnOpenDebugMenu;
            @OpenDebugMenu.canceled += instance.OnOpenDebugMenu;
        }

        private void UnregisterCallbacks(IPlayerDebugFuntionalityActionMapActions instance)
        {
            @OpenDebugMenu.started -= instance.OnOpenDebugMenu;
            @OpenDebugMenu.performed -= instance.OnOpenDebugMenu;
            @OpenDebugMenu.canceled -= instance.OnOpenDebugMenu;
        }

        public void RemoveCallbacks(IPlayerDebugFuntionalityActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerDebugFuntionalityActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerDebugFuntionalityActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerDebugFuntionalityActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerDebugFuntionalityActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerDebugFuntionalityActionMapActions @PlayerDebugFuntionalityActionMap => new PlayerDebugFuntionalityActionMapActions(this);
    public interface IPlayerDebugFuntionalityActionMapActions
    {
        void OnOpenDebugMenu(InputAction.CallbackContext context);
    }
}
